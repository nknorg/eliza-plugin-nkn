{"version":3,"sources":["../src/actions/sendMessage.ts","../src/environment.ts","../src/templates/sendMessage.ts","../src/actions/receiveMessage.ts","../src/templates/receiveMessage.ts","../src/services/nknClient.ts","../src/index.ts"],"sourcesContent":["import {\n    type Action,\n    composeContext, Content, elizaLogger,\n    generateObject, getEmbeddingZeroVector,\n    HandlerCallback,\n    type IAgentRuntime,\n    type Memory,\n    ModelClass,\n    ServiceType,\n    type State, stringToUuid,\n} from '@elizaos/core'\nimport {z} from 'zod'\nimport {validateNknConfig} from '../environment'\nimport {NknClientService} from '../services'\nimport {sendMessageTemplate} from '../templates/sendMessage'\n\nconst SendMessageActionSchema = z.object({\n    address: z.string(),\n    message: z.string(),\n})\n\nexport interface SendMessageContent extends Content {\n    address: string;\n    message: string;\n}\n\nexport const sendMessageAction: Action = {\n    name: 'SEND_MESSAGE',\n    similes: [\n        'SEND_MESSAGE',\n        'SEND_TEXT',\n    ],\n    description:\n        'Sends a message to a user in the current room.',\n    validate: async (runtime: IAgentRuntime, message: Memory) => {\n        await validateNknConfig(runtime)\n        return true\n    },\n    handler: async (runtime: IAgentRuntime,\n                    message: Memory,\n                    state: State,\n                    options: any,\n                    callback: HandlerCallback): Promise<boolean> => {\n        let currentState = state\n        if (!currentState) {\n            currentState = (await runtime.composeState(message)) as State\n        } else {\n            currentState = await runtime.updateRecentMessageState(state)\n        }\n\n        // Compose context\n        const sendMessageContext = composeContext({\n            state: currentState,\n            template: sendMessageTemplate,\n        })\n\n        // Generate transfer content\n        const content = (\n            await generateObject({\n                runtime,\n                context: sendMessageContext,\n                modelClass: ModelClass.LARGE,\n                schema: SendMessageActionSchema,\n            })\n        ).object as unknown as SendMessageContent\n\n        if (!content.address) {\n            elizaLogger.error(`Invalid NKN address: ${content.address}`)\n            if (callback) {\n                callback({\n                    text: 'Invalid NKN address',\n                    content: {error: 'Invalid NKN address'},\n                })\n            }\n            return false\n        }\n\n        const agentId = runtime.agentId\n        const nknClientService = runtime.getService<NknClientService>(ServiceType.NKN_CLIENT_SERVICE)\n        const nknClientInstance = nknClientService.getNknClientInstance(agentId)\n        nknClientInstance.setMemory(message)\n        await nknClientInstance.waitConnected()\n        const messageId = await nknClientInstance.sendMessage(content.address, content.message)\n        const newMessage: Memory = {\n            id: stringToUuid(messageId),\n            agentId: runtime.agentId,\n            roomId: message.roomId,\n            userId: message.userId,\n            content,\n        }\n\n        await runtime.messageManager.createMemory(newMessage)\n        elizaLogger.info(`Sent message to ${content.address}: ${content.message}`)\n\n        // Create a timeout promise that will reject after 10 minutes\n        const timeoutPromise = new Promise<boolean>((_, reject) => {\n            setTimeout(() => {\n                elizaLogger.error('Timeout waiting for callback.')\n                reject(new Error('Callback not called within 10 minutes'))\n            }, 10 * 60 * 1000)  // 10 minutes in milliseconds\n        })\n\n        // Create a promise that resolves when the callback is called\n        const callbackPromise = new Promise<boolean>((resolve, reject) => {\n            const wrappedCallback = (response) => {\n                if (response) {\n                    response.text = `Sent message to ${content.address}: ${content.message}\nReceived message: ${response.text}`\n                    callback(response)\n                    resolve(true) // Callback was called, resolve promise\n                } else {\n                    reject(new Error('Callback called but no response.'))\n                }\n            }\n            nknClientInstance.setCallback(wrappedCallback)\n        })\n\n        try {\n            await Promise.race([callbackPromise, timeoutPromise])\n            return true\n        } catch (error) {\n            elizaLogger.error('Error:', error)\n            return false\n        }\n    },\n    examples: [\n        [\n            {\n                user: '{{user1}}',\n                content: {text: 'Please ask Alice what time the meeting starts tomorrow?'},\n            },\n            {\n                user: '{{agent}}',\n                content: {\n                    text: 'I don\\'t have Alice\\'s address, please tell me the address.',\n                },\n            },\n            {\n                user: '{{user1}}',\n                content: {\n                    text: 'Alice\\'s NKN address is 03397286c9c728bdd779b44f41bd28b0f6463531cbf8dc0df38949c86d84ed6f',\n                },\n            },\n            {\n                user: '{{agent}}',\n                content: {\n                    text: 'I will send a message to Alice.\\n<message>',\n                    action: 'SEND_MESSAGE',\n                },\n            },\n        ],\n    ],\n}\n","import type {IAgentRuntime} from '@elizaos/core'\nimport {z} from 'zod'\n\nexport const nknEnvSchema = z.object({\n    NKN_CLIENT_PRIVATE_KEY: z.string().min(1, 'NKN_CLIENT_PRIVATE_KEY is required'),\n    NKN_CLIENT_ID: z.string().optional(),\n})\n\nexport type NknConfig = z.infer<typeof nknEnvSchema>\n\nexport async function validateNknConfig(runtime: IAgentRuntime): Promise<NknConfig> {\n    try {\n        const config = {\n            NKN_CLIENT_PRIVATE_KEY:\n                runtime.getSetting('NKN_CLIENT_PRIVATE_KEY') || process.env.NKN_CLIENT_PRIVATE_KEY,\n            NKN_CLIENT_ID:\n                runtime.getSetting('NKN_CLIENT_ID') || process.env.NKN_CLIENT_ID,\n        }\n        return nknEnvSchema.parse(config)\n    } catch (error) {\n        if (error instanceof z.ZodError) {\n            const errorMessages = error.errors\n                .map((err) => `${err.path.join('.')}: ${err.message}`)\n                .join('\\n')\n            throw new Error(\n                `NKN configuration validation failed:\\n${errorMessages}`,\n            )\n        }\n        throw error\n    }\n}\n","export const sendMessageTemplate = `{{actionExamples}}\n(Action examples are for reference only. Do not use the information from them in your response.)\n\n# Knowledge\n{{knowledge}}\n\n# Task: Generate dialog and actions for the character {{agentName}}.\nAbout {{agentName}}:\n{{bio}}\n{{lore}}\n\n{{providers}}\n\n{{attachments}}\n\n# Capabilities\nNote that {{agentName}} is capable of reading/seeing/hearing various forms of media, including images, videos, audio, plaintext and PDFs. Recent attachments have been included above under the \"Attachments\" section.\n\n{{messageDirections}}\n\nRespond with a JSON markdown block containing only the extracted values. Use null for any values that cannot be determined.\n\nThe format of the address is as follows:\n- Assistant: 03397286c9c728bdd779b44f41bd28b0f6463531cbf8dc0df38949c86d84ed6f\n- User1: alice.d2286f7080da76c8fb2edfa4e280f27f9aaea201f6b3b871e11d41327b993b20\n- User2: bob.5eb3a1856e4565416807750328564e08566642406f81720e39c5f16b5565fb23\n\nExample response:\n    \\`\\`\\`json\n{\n    \"address\": \"03397286c9c728bdd779b44f41bd28b0f6463531cbf8dc0df38949c86d84ed6f\",\n    \"message\": \"What time does the meeting start tomorrow?\"\n}\n\\`\\`\\`\n\n{{recentMessages}}\n\nGiven the recent messages, extract the following information:\n- The address (Assistant, User1, or User2)\n- The message that you need to regenerate a piece of text to convey the message, telling the other party who you are and whose message you are conveying\n\nRespond with a JSON markdown block containing only the extracted values.\n`\n","import {\n    type Action,\n    composeContext,\n    generateText,\n    getEmbeddingZeroVector,\n    HandlerCallback,\n    type IAgentRuntime,\n    type Memory,\n    ModelClass,\n    type State,\n} from '@elizaos/core'\nimport {validateNknConfig} from '../environment'\nimport {receiveMessageTemplate} from '../templates/receiveMessage'\n\nexport const receiveMessageAction: Action = {\n    name: 'RECEIVE_MESSAGE',\n    similes: [\n        'RECEIVE_MESSAGE',\n        'RECEIVE_TEXT',\n    ],\n    description:\n        'Receives a message from a user in the current room.',\n    validate: async (runtime: IAgentRuntime, message: Memory) => {\n        await validateNknConfig(runtime)\n        return true\n    },\n    handler: async (runtime: IAgentRuntime,\n                    message: Memory,\n                    state: State,\n                    options: any,\n                    callback: HandlerCallback): Promise<boolean> => {\n        let currentState = state\n        if (!currentState) {\n            currentState = (await runtime.composeState(message)) as State\n        } else {\n            currentState = await runtime.updateRecentMessageState(state)\n        }\n\n        // Compose context\n        const receiveMessageContext = composeContext({\n            state: currentState,\n            template: receiveMessageTemplate,\n        })\n\n        const response = await generateText({\n            runtime,\n            context: receiveMessageContext,\n            modelClass: ModelClass.LARGE,\n            stop: ['\\n'],\n        })\n\n        // save response to memory\n        const responseMessage: Memory = {\n            agentId: runtime.agentId,\n            roomId: message.roomId,\n            userId: message.userId,\n            content: {\n                text: response,\n                action: 'IGNORE',\n                source: message.content.source,\n                inReplyTo: message.id,\n            },\n            embedding: getEmbeddingZeroVector(),\n            createdAt: Date.now(),\n        }\n\n        await runtime.messageManager.createMemory(responseMessage)\n        await callback(responseMessage.content)\n        return true\n    },\n    examples: [\n        [\n            {\n                user: '{{user2}}',\n                content: {\n                    text: 'Hello, I am Alice.',\n                    action: 'RECEIVE_MESSAGE',\n                },\n            },\n            {\n                user: '{{agent}}',\n                content: {\n                    text: 'Hello, Alice.',\n                    action: \"IGNORE\"\n                },\n            },\n        ],\n        [\n            {\n                user: '{{agent1}}',\n                content: {\n                    text: 'Hello, I am Agent1.',\n                    action: 'RECEIVE_MESSAGE',\n                },\n            },\n            {\n                user: '{{agent2}}',\n                content: {\n                    text: 'Hello, Agent1.',\n                    action: \"IGNORE\"\n                },\n            },\n        ]\n    ],\n}\n","export const receiveMessageTemplate = `{{actionExamples}}\n(Action examples are for reference only. Do not use the information from them in your response.)\n\n# Knowledge\n{{knowledge}}\n\n# Task: Generate dialog and actions for the character {{agentName}}.\nAbout {{agentName}}:\n{{bio}}\n{{lore}}\n\n{{providers}}\n\n{{attachments}}\n\n# Capabilities\nNote that {{agentName}} is capable of reading/seeing/hearing various forms of media, including images, videos, audio, plaintext and PDFs. Recent attachments have been included above under the \"Attachments\" section.\n\n{{messageDirections}}\n\n{{recentMessages}}\n\n{{actions}}\n`\n","import {Content, elizaLogger, IAgentRuntime, Memory, Service, ServiceType, stringToUuid} from '@elizaos/core'\nimport {Message, MultiClient} from 'nkn-sdk'\nimport {v4 as uuidV4} from 'uuid'\n\nenum PayloadType {\n    BINARY = 0,\n    TEXT = 1,\n    ACK = 2,\n    SESSION = 3,\n}\n\nclass NknClientInstance {\n    private privateKey: string\n    private clientId: string\n\n    private runtime: IAgentRuntime\n    private memory: Memory\n    private callback: Function\n    private nknClient: MultiClient\n    private connectResolve: any\n    private connected: Promise<boolean>\n\n    constructor(privateKey: string, clientId: string, runtime: IAgentRuntime) {\n        this.privateKey = privateKey\n        this.clientId = clientId\n        this.runtime = runtime\n\n\n        // Create NKN client\n        this.connected = new Promise<boolean>(resolve => {\n            this.connectResolve = resolve\n        })\n        this.nknClient = new MultiClient({\n            identifier: clientId,\n            seed: privateKey,\n            msgHoldingSeconds: 3999999999,\n            numSubClients: 4,\n            originalClient: true,\n        })\n        this.nknClient.onConnect(({addr}) => {\n            elizaLogger.info(`NKN client connected. Address: ${this.nknClient.addr}`)\n            this.connectResolve(true)\n        })\n        this.nknClient.onConnectFailed(() => {\n            elizaLogger.error('NKN client connection failed.')\n        })\n\n        this.nknClient.onMessage(async (message: Message) => {\n            elizaLogger.info(`Received message from ${message.src}: ${message.payload}`)\n            await this.receiveMessage(message)\n        })\n    }\n\n    setMemory(memory: Memory) {\n        this.memory = memory\n    }\n\n    setCallback(callback: Function) {\n        this.callback = callback\n    }\n\n    async receiveMessage(message: Message) {\n        if (message.src == this.nknClient.addr) { // ignore self message\n            return\n        }\n        const data = JSON.parse(<string>message.payload)\n        if (data.contentType === 'receipt') { // ignore receipt message\n            return\n        }\n        if (message.payloadType == PayloadType.TEXT) {\n            await this.receiveTextMessage(message, data)\n        }\n    }\n\n    async receiveTextMessage(message: Message, payloadData: any) {\n        if (payloadData.contentType !== 'text') { // ignore not text message\n            return\n        }\n        const content: string = payloadData.content\n        const messageId: string = payloadData.id\n\n        const newMemory: Memory = {\n            id: stringToUuid(messageId),\n            userId: stringToUuid(message.src),\n            agentId: this.runtime.agentId,\n            roomId: stringToUuid(message.src),\n            content: {\n                text: content,\n                action: 'RECEIVE_MESSAGE',\n            } as Content,\n        }\n\n        if (this.memory) {\n            newMemory.roomId = this.memory.roomId\n        }\n\n        if (!payloadData.options?.replyTo) {\n            await this.runtime.messageManager.createMemory(newMemory)\n\n            await this.runtime.processActions(newMemory, [newMemory], null, async (response) => {\n                await this.sendMessage(message.src, response.text, {replyTo: messageId})\n                return [newMemory]\n            })\n        }\n\n        if (typeof this.callback === 'function') {\n            await this.callback(newMemory.content)\n            this.callback = null\n        }\n    }\n\n    async waitConnected() {\n        await this.connected\n    }\n\n    async sendMessage(src: string, message: string, options?: any): Promise<string> {\n        const messageId = uuidV4()\n        const data = {\n            id: messageId,\n            contentType: 'text',\n            content: message,\n            timestamp: Date.now(),\n            options: {\n                replyTo: options?.replyTo,\n            },\n        }\n        try {\n            await this.waitConnected()\n            await this.nknClient.send(src, JSON.stringify(data), {noReply: true})\n            return messageId\n        } catch (e) {\n            elizaLogger.error(`Failed to send message to ${src}: ${e}`)\n        }\n    }\n}\n\nexport class NknClientService extends Service {\n    static serviceType = ServiceType.NKN_CLIENT_SERVICE\n\n    private instanceMap: Map<string, NknClientInstance> = new Map()\n\n    constructor() {\n        super()\n    }\n\n    setNknClientInstance(agentId: string, instance: NknClientInstance) {\n        this.instanceMap.set(agentId, instance)\n    }\n\n    getNknClientInstance(agentId: string): NknClientInstance {\n        return this.instanceMap.get(agentId)\n    }\n\n    async initialize(runtime: IAgentRuntime): Promise<void> {\n        const privateKey = runtime.getSetting('NKN_CLIENT_PRIVATE_KEY') as string\n        const clientId = runtime.getSetting('NKN_CLIENT_ID') as string\n        if (!privateKey) {\n            throw new Error('NKN_CLIENT_PRIVATE_KEY is required')\n        }\n        const newNknClient = new NknClientInstance(privateKey, clientId, runtime)\n        this.setNknClientInstance(runtime.agentId, newNknClient)\n    }\n\n\n}\n","import type {Plugin} from '@elizaos/core'\nimport {receiveMessageAction, sendMessageAction} from './actions'\nimport {NknClientService} from './services'\n\nexport const nknPlugin: Plugin = {\n    name: 'nkn',\n    description: 'A plugin based on NKN that can communicate with other AI Agents',\n    services: [new NknClientService()],\n    actions: [sendMessageAction, receiveMessageAction],\n}\n\nexport default nknPlugin\n"],"mappings":"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","names":["z","z","composeContext","getEmbeddingZeroVector","ModelClass","composeContext","ModelClass","getEmbeddingZeroVector","elizaLogger","ServiceType","stringToUuid","elizaLogger","stringToUuid","ServiceType"]}